

        A Brute Force attack is a method of attempting to guess passwords or keys by automated probing. An example of a brute-force attack is password cracking. Passwords are usually not stored in clear text on the systems but as hash values.



        Since the password cannot be calculated backward from the hash value, the brute force method determines the hash values belonging to the randomly selected passwords until a hash value matches the stored hash value. In this case, the password is found. This method is also called offline brute-forcing. This module will focus on online brute-forcing and explicitly deal with the websites' login forms.


        There are many tools and methods to utilize for login brute-forcing, like:

            Ncrack
            wfuzz
            medusa
            patator
            hydra
            and others.




        ///Basic HTTP auth


        The HTTP specification provides two parallel authentication mechanisms:

            Basic HTTP AUTH is used to authenticate the user to the HTTP server.

            Proxy Server Authentication is used to authenticate the user to an intermediate proxy server.


        These two mechanisms work very similarly as they use requests, response status codes, and response headers. However, there are differences in the status codes and header names used.

        The Basic HTTP Authentication scheme uses user ID and password for authentication. The client sends a request without authentication information with its first request. The server's response contains the WWW-Authenticate header field, which requests the client to provide the credentials. This header field also defines details of how the authentication has to take place. The client is asked to submit the authentication information. In its response, the server transmits the so-called realm, a character string that tells the client who is requesting the data. The client uses the Base64 method for encoding the identifier and password. This encoded character string is transmitted to the server in the Authorization header field.

         Basic HTTP Authentication usually responses with an HTTP 401 Unauthorized response code. As we mentioned previously, we will resort to a Brute Forcing attack, as we do not have enough information to attempt a different type of attack, which we will cover in this section.


        
        ////Default Credentials


        We can find a list of default password login pairs in the SecLists repository as well, specifically in the /SecLists/Passwords/Default-Credentials 

        Options 	            Description
        -C              ftp-betterdefaultpasslist.txt 	Combined Credentials Wordlist
        SERVER_IP 	    Target IP
        -s PORT 	    Target Port
        http-get 	    Request Method
        / 	            Target Path


        $ hydra -C /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 178.211.23.155 -s 31099 http-get /



            ///Brute Forcing Hydra Forms
    
    
    
                --http[s]-{head|get|post}
                --http[s]-post-form


        The 1st module serves for basic HTTP authentication, while the 2nd module is used for login forms, like .php or .aspx and others.

        To decide which module we need, we have to determine whether the web application uses GET or a POST form. 


        Based on the URL scheme at the beginning, we can determine whether this is an HTTP or HTTPS post-form. If our target URL shows http, in this case, we should use the http-post-form module.

        To find out how to use the http-post-form module, we can use the "-U" flag to list the parameters it requires and examples of usage:

        $ hydra http-post-form -U


        In summary, we need to provide three parameters, separated by :, as follows:

            URL path, which holds the login form
    
            POST parameters for username/password
    
            A failed/success login string, which lets hydra recognize whether the login attempt was successful or not


        /login.php:[user parameter]=^USER^&[password parameter]=^PASS^:[FAIL/SUCCESS]=[success/failed string]


        Type 	Boolean Value 	        Flag
        Fail 	    FALSE 	         F=html_content
        Success 	TRUE 	         S=html_content



        //Determine Login Parameters


        -Using Browser

        One of the easiest ways to capture a form's parameters is through using a browser's built in developer tools. For example, we can open firefox within PwnBox, and then bring up the Network Tools 

        Once we have the request, we can simply right-click on one of them, and select Copy > Copy POST data

        -Using Burp Suite

        
        
        
        
        $ hydra -l admin -P /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt -f 178.35.49.134 -s 32901 http-post-form "/login.php:username=^USER^&password=^PASS^:F=<form name='login'"





        ////Personalized Wordlists


        --CUPP

        (   https://github.com/Mebus/cupp     )


        Many tools can create a custom password wordlist based on certain information. The tool we will be using is cupp, which is pre-installed in your PwnBox. If we are doing the exercise from our own VM, we can install it with sudo apt install cupp or clone it from the Github repository. Cupp is very easy to use. We run it in interactive mode by specifying the -i argument, and answer the questions, as follows:

        $ cupp -i




        ////Password Policy



        8 characters or longer
        contains special characters
        contains numbers


        $ sed -ri '/^.{,7}$/d' william.txt            # remove shorter than 8
        $ sed -ri '/[!-/:-@\[-`\{-~]+/!d' william.txt # remove no special chars
        $ sed -ri '/[0-9]+/!d' william.txt            # remove no numbers



        ///Custom Username Wordlist


        We should also consider creating a personalized username wordlist based on the person's available details. For example, the person's username could be b.gates or gates or bill, and many other potential variations. There are several methods to create the list of potential usernames, the most basic of which is simply writing it manually.

        One such tool we can use is Username Anarchy, which we can clone from GitHub, as follows:

        ./username-anarchy Bill Gates > bill.txt





                    ////Service Authentication Brute Forcing



        --SSH Attack

        $ hydra -L bill.txt -P william.txt -u -f ssh://178.35.49.134:22 -t 4


        -u        loop around users, not passwords (effective! implied with -x)


         -f / -F   exit when a login/pass pair is found (-M: -f per host, -F global)




        ---FTP Brute Forcing

        Note 1: Sometimes administrators test their security measures and policies with different tools. In this case, the administrator of this web server kept "hydra" installed. We can benefit from it and use it against the local system by attacking the FTP service locally or remotely.

        $ hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1


        