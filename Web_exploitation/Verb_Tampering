        An HTTP Verb Tampering attack exploits web servers that accept many HTTP verbs and methods. This can be exploited by sending malicious requests using unexpected methods, which may lead to bypassing the web application's authorization mechanism or even bypassing its security controls against other web attacks. H


        The HTTP protocol works by accepting various HTTP methods as verbs at the beginning of an HTTP request. Depending on the web server configuration, web applications may be scripted to accept certain HTTP methods for their various functionalities and perform a particular action based on the type of the request.

        if the web server configurations are not restricted to only accept the HTTP methods required by the web server (e.g. GET/POST), and the web application is not developed to handle other types of HTTP requests (e.g. HEAD, PUT), then we may be able to exploit this insecure configuration to gain access to functionalities we do not have access to, or even bypass certain security controls.


|Verb 	           |         Description|
|---------------|--------------------|
|HEAD 	|Identical to a GET request, but its response only contains the headers, without the response body
|PUT 	|Writes the request payload to the specified location
|DELETE 	|Deletes the resource at the specified location
|OPTIONS 	|Shows different options accepted by a web server, like accepted HTTP verbs
|PATCH 	|Apply partial modifications to the resource at the specified location



        --Insecure Configurations

        A web server's authentication configuration may be limited to specific HTTP methods, which would leave some HTTP methods accessible without authentication. 


        <Limit GET POST>
            Require valid-user
        </Limit>


### Insecure Coding
```
        $pattern = "/^[A-Za-z\s]+$/";

        if(preg_match($pattern, $_GET["code"])) {
            $query = "Select * from ports where port_code like '%" . $_REQUEST["code"] . "%'";
            ...SNIP...
        }
```

        We can see that the sanitization filter is only being tested on the GET parameter. If the GET requests do not contain any bad characters, then the query would be executed. However, when the query is executed, the $_REQUEST["code"] parameters are being used, which may also contain POST parameters, leading to an inconsistency in the use of HTTP Verbs.


        ---Bypassing Basic Authentication

        Exploiting HTTP Verb Tampering vulnerabilities is usually a relatively straightforward process. We just need to try alternate HTTP methods to see how they are handled by the web server and the web application. While many automated vulnerability scanning tools can consistently identify HTTP Verb Tampering vulnerabilities caused by insecure server configurations, they usually miss identifying HTTP Tampering vulnerabilities caused by insecure coding.

        As the page uses a GET request, we can send a POST request and see whether the web page allows POST requests (i.e., whether the Authentication covers POST requests). To do so, we can right-click on the intercepted request in Burp and select Change Request Method, and it will automatically change the request into a POST request


        To see whether the server accepts HEAD requests, we can send an OPTIONS request to it and see what HTTP methods are accepted, as follows:

        $ curl -i -X OPTIONS http://SERVER_IP:PORT/


        



